# bump: curl-version /CURL_VERSION="(.*)"/ https://curl.se/download/|re:/curl-([\d.]+).tar.gz/$1/|semver:*
CURL_VERSION="8.11.1"

export ZOPEN_BUILD_LINE="STABLE" # Default build line

export ZOPEN_STABLE_URL="https://curl.se/download/curl-${CURL_VERSION}.tar.gz"
export ZOPEN_STABLE_DEPS="curl gzip tar make m4 perl autoconf openssl zlib gawk zoslib check_python"

export ZOPEN_DEV_URL="https://github.com/curl/curl.git"
export ZOPEN_DEV_DEPS="libtool automake curl gzip tar make m4 perl autoconf openssl zlib gawk zoslib check_python"

export ZOPEN_EXTRA_CPPFLAGS="-I\$OPENSSL_HOME/include -I\$ZLIB_HOME/include"
export LDFLAGS="-L\$OPENSSL_HOME/lib -L\$ZLIB_HOME/lib -lcrypto -lssl -lz"
export ZOPEN_CHECK_TIMEOUT=72000 # 20 hours
export ZOPEN_CHECK_OPTS="-j\$ZOPEN_NUM_JOBS check"
export ZOPEN_COMP=CLANG
export ZOPEN_EXTRA_CONFIGURE_OPTS="--enable-ipv6"

zopen_post_buildenv()
{
  if [ "${ZOPEN_BUILD_LINE}x" = "DEVx" ]; then
    export ZOPEN_BOOTSTRAP="./buildconf"
  fi
}


export ZOPEN_EXTRA_CONFIGURE_OPTS="--with-openssl=\$OPENSSL_HOME --without-libpsl"

# Requires impacket for tests
zopen_init()
{
  if ! type python3 >/dev/null ; then
    printError "need python3 with impacket package set up for build"
  fi
  python3 -m venv curl_python
  . ./curl_python/bin/activate
  pip3 install impacket
}

zopen_check_results()
{
chk="$1/$2_check.log"

success=$(grep -E "TESTDONE:.*tests out of.*reported OK" ${chk} | cut -f2 -d' ')
totalTests=$(grep -E "TESTDONE:.*tests out of.*reported OK" ${chk} | cut -f6 -d' ')
failures=$((totalTests-success))

if [ "${ZOPEN_BUILD_LINE}x" = "DEVx" ]; then
  expectedFailures="18"
else
  expectedFailures="7" # 2 of the 7 are flaky
fi

cat <<ZZ
actualFailures:$failures
totalTests:$totalTests
expectedFailures:$expectedFailures
ZZ
}

zopen_append_to_env()
{
cat <<ZZ
if [ ! -z "\$ZOPEN_IN_ZOPEN_BUILD" ]; then
  export ZOPEN_EXTRA_CFLAGS="\${ZOPEN_EXTRA_CFLAGS} -I\$PWD/include"
  export ZOPEN_EXTRA_CXXFLAGS="\${ZOPEN_EXTRA_CXXFLAGS}	-I\$PWD/include"
  export ZOPEN_EXTRA_LDFLAGS="\${ZOPEN_EXTRA_LDFLAGS} -L\$PWD/lib"
  export ZOPEN_EXTRA_LIBS="\${ZOPEN_EXTRA_LIBS} -lcurl"
fi
ZZ
}

zopen_append_to_zoslib_env() {
cat <<EOF
SSL_CERT_FILE|set|PROJECT_ROOT/cacert.pem
EOF
}

zopen_post_install()
{
  # Install a cacert.pem to be used (optionally) by the customer
  $MYDIR/zopen update-cacert -f $1
}

zopen_get_version()
{
  ./src/curl --version | cut -f2 -d' ' | head -1
}

zopen_terminate()
{
  deactivate
}
